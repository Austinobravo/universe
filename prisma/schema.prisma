// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


// enum UserRole {
//   Admin
//   User
// }
model User{
  id Int @id @default(autoincrement()) 
  lastName String 
  firstName String 
  email String @unique 
  password String 
  role String @default("User")
 

  investment Investment[]
  deposit Deposits[]
  withdrawals Withdrawals[]
  payment Payment[]
  balance Balance[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}
model Investment{
  // id Int @id @default(autoincrement()) 
  id Int @id @default(autoincrement()) 
  name String 
  min Int 
  max Int
  profit Int
  period String 
  // userId String @db.ObjectId
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
}

model Deposits{
  id Int @id @default(autoincrement()) 
  name String 
  amount Int
  approved Boolean @default(false)
  userId Int
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  

  @@index([userId])
}

model Withdrawals{
  id Int @id @default(autoincrement()) 
  userId Int
  amount Int
  user User @relation(fields: [userId], references: [id])
  balance Balance[]
  approved Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
}

model Payment{
  id Int @id @default(autoincrement()) 
  userId Int @unique
  type String @default("Bitcoin")
  account String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
}

model Balance{
  id Int @id @default(autoincrement()) 
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalDeposits Int
  totalWithdrawals Int
  totalBalance Int
  

  withdrawalId Int
  withdrawal Withdrawals @relation(fields: [withdrawalId], references: [id], onDelete: Cascade)
  

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  @@index([userId])
  @@index([withdrawalId])

}